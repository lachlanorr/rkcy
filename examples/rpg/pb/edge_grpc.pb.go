// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MmoServiceClient is the client API for MmoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MmoServiceClient interface {
	GetPlayer(ctx context.Context, in *MmoRequest, opts ...grpc.CallOption) (*Player, error)
	CreatePlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error)
}

type mmoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMmoServiceClient(cc grpc.ClientConnInterface) MmoServiceClient {
	return &mmoServiceClient{cc}
}

func (c *mmoServiceClient) GetPlayer(ctx context.Context, in *MmoRequest, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/rocketcycle.examples.rpg.pb.MmoService/GetPlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmoServiceClient) CreatePlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, "/rocketcycle.examples.rpg.pb.MmoService/CreatePlayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MmoServiceServer is the server API for MmoService service.
// All implementations must embed UnimplementedMmoServiceServer
// for forward compatibility
type MmoServiceServer interface {
	GetPlayer(context.Context, *MmoRequest) (*Player, error)
	CreatePlayer(context.Context, *Player) (*Player, error)
	mustEmbedUnimplementedMmoServiceServer()
}

// UnimplementedMmoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMmoServiceServer struct {
}

func (UnimplementedMmoServiceServer) GetPlayer(context.Context, *MmoRequest) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayer not implemented")
}
func (UnimplementedMmoServiceServer) CreatePlayer(context.Context, *Player) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlayer not implemented")
}
func (UnimplementedMmoServiceServer) mustEmbedUnimplementedMmoServiceServer() {}

// UnsafeMmoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MmoServiceServer will
// result in compilation errors.
type UnsafeMmoServiceServer interface {
	mustEmbedUnimplementedMmoServiceServer()
}

func RegisterMmoServiceServer(s grpc.ServiceRegistrar, srv MmoServiceServer) {
	s.RegisterService(&_MmoService_serviceDesc, srv)
}

func _MmoService_GetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MmoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmoServiceServer).GetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rocketcycle.examples.rpg.pb.MmoService/GetPlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmoServiceServer).GetPlayer(ctx, req.(*MmoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MmoService_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmoServiceServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rocketcycle.examples.rpg.pb.MmoService/CreatePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmoServiceServer).CreatePlayer(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

var _MmoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rocketcycle.examples.rpg.pb.MmoService",
	HandlerType: (*MmoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayer",
			Handler:    _MmoService_GetPlayer_Handler,
		},
		{
			MethodName: "CreatePlayer",
			Handler:    _MmoService_CreatePlayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "edge.proto",
}
