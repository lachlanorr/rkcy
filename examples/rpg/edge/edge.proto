// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

package edge;
option go_package = "github.com/lachlanorr/rocketcycle/examples/rpg/edge";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "rkcy/apecs.proto";
import "player.proto";
import "character.proto";
import "relationships.proto";

message RpgRequest {
    string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}", min_length: 1}];
}

message RpgResponse {
    string id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}", min_length: 1}];
}

message PlayerResponse {
    pb.Player player = 1;
    pb.PlayerRelatedConcerns related = 2;
}

message CharacterResponse {
    pb.Character character = 1;
    pb.CharacterRelatedConcerns related = 2;
}

service RpgService {
    rpc ReadPlayer(RpgRequest) returns (PlayerResponse) {
        option (google.api.http) = {
            get: "/v1/player/read/{id}"
        };
    }
    rpc CreatePlayer(pb.Player) returns (pb.Player) {
        option (google.api.http) = {
            post: "/v1/player/create"
            body: "*"
        };
    }
    rpc UpdatePlayer(pb.Player) returns (pb.Player) {
        option (google.api.http) = {
            post: "/v1/player/update"
            body: "*"
        };
    }
    rpc DeletePlayer(RpgRequest) returns (pb.Player) {
        option (google.api.http) = {
            post: "/v1/player/delete/{id}"
        };
    }


    rpc ReadCharacter(RpgRequest) returns (CharacterResponse) {
        option (google.api.http) = {
            get: "/v1/character/read/{id}"
        };
    }
    rpc CreateCharacter(pb.Character) returns (pb.Character) {
        option (google.api.http) = {
            post: "/v1/character/create"
            body: "*"
        };
    }
    rpc UpdateCharacter(pb.Character) returns (pb.Character) {
        option (google.api.http) = {
            post: "/v1/character/update"
            body: "*"
        };
    }
    rpc DeleteCharacter(RpgRequest) returns (pb.Character) {
        option (google.api.http) = {
            post: "/v1/character/delete/{id}"
        };
    }

    rpc FundCharacter(pb.FundingRequest) returns (pb.Character) {
        option (google.api.http) = {
            post: "/v1/character/fund"
            body: "*"
        };
    }

    rpc ConductTrade(pb.TradeRequest) returns (rkcy.Void) {
        option (google.api.http) = {
            post: "/v1/character/conductTrade"
            body: "*"
        };
    }
}

