// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: rkcy/apecs.proto

package rkcy

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Direction int32

const (
	Direction_FORWARD Direction = 0
	Direction_REVERSE Direction = 1
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "FORWARD",
		1: "REVERSE",
	}
	Direction_value = map[string]int32{
		"FORWARD": 0,
		"REVERSE": 1,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_rkcy_apecs_proto_enumTypes[0].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_rkcy_apecs_proto_enumTypes[0]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{0}
}

type System int32

const (
	System_NO_SYSTEM System = 0
	System_PROCESS   System = 1
	System_STORAGE   System = 2
)

// Enum value maps for System.
var (
	System_name = map[int32]string{
		0: "NO_SYSTEM",
		1: "PROCESS",
		2: "STORAGE",
	}
	System_value = map[string]int32{
		"NO_SYSTEM": 0,
		"PROCESS":   1,
		"STORAGE":   2,
	}
)

func (x System) Enum() *System {
	p := new(System)
	*p = x
	return p
}

func (x System) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System) Descriptor() protoreflect.EnumDescriptor {
	return file_rkcy_apecs_proto_enumTypes[1].Descriptor()
}

func (System) Type() protoreflect.EnumType {
	return &file_rkcy_apecs_proto_enumTypes[1]
}

func (x System) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System.Descriptor instead.
func (System) EnumDescriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{1}
}

type UponError int32

const (
	UponError_REPORT  UponError = 0
	UponError_REVERT  UponError = 1
	UponError_BAILOUT UponError = 2
)

// Enum value maps for UponError.
var (
	UponError_name = map[int32]string{
		0: "REPORT",
		1: "REVERT",
		2: "BAILOUT",
	}
	UponError_value = map[string]int32{
		"REPORT":  0,
		"REVERT":  1,
		"BAILOUT": 2,
	}
)

func (x UponError) Enum() *UponError {
	p := new(UponError)
	*p = x
	return p
}

func (x UponError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UponError) Descriptor() protoreflect.EnumDescriptor {
	return file_rkcy_apecs_proto_enumTypes[2].Descriptor()
}

func (UponError) Type() protoreflect.EnumType {
	return &file_rkcy_apecs_proto_enumTypes[2]
}

func (x UponError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UponError.Descriptor instead.
func (UponError) EnumDescriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{2}
}

type Severity int32

const (
	Severity_DBG Severity = 0
	Severity_INF Severity = 1
	Severity_WRN Severity = 2
	Severity_ERR Severity = 3
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "DBG",
		1: "INF",
		2: "WRN",
		3: "ERR",
	}
	Severity_value = map[string]int32{
		"DBG": 0,
		"INF": 1,
		"WRN": 2,
		"ERR": 3,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_rkcy_apecs_proto_enumTypes[3].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_rkcy_apecs_proto_enumTypes[3]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{3}
}

type Code int32

const (
	Code_OK                   Code = 0
	Code_INTERNAL             Code = 1
	Code_MARSHAL_FAILED       Code = 2
	Code_NOT_FOUND            Code = 3
	Code_CONNECTION           Code = 4
	Code_CONSTRAINT_VIOLATION Code = 5
	Code_UNKNOWN_COMMAND      Code = 6
	Code_INVALID_ARGUMENT     Code = 7
	Code_NOT_IMPLEMENTED      Code = 8
	Code_NIL_RESULT           Code = 9
	// User defined codes should be greater than RKCY_INTERNAL_MAX
	Code_RKCY_INTERNAL_MAX_CODE Code = 32
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0:  "OK",
		1:  "INTERNAL",
		2:  "MARSHAL_FAILED",
		3:  "NOT_FOUND",
		4:  "CONNECTION",
		5:  "CONSTRAINT_VIOLATION",
		6:  "UNKNOWN_COMMAND",
		7:  "INVALID_ARGUMENT",
		8:  "NOT_IMPLEMENTED",
		9:  "NIL_RESULT",
		32: "RKCY_INTERNAL_MAX_CODE",
	}
	Code_value = map[string]int32{
		"OK":                     0,
		"INTERNAL":               1,
		"MARSHAL_FAILED":         2,
		"NOT_FOUND":              3,
		"CONNECTION":             4,
		"CONSTRAINT_VIOLATION":   5,
		"UNKNOWN_COMMAND":        6,
		"INVALID_ARGUMENT":       7,
		"NOT_IMPLEMENTED":        8,
		"NIL_RESULT":             9,
		"RKCY_INTERNAL_MAX_CODE": 32,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_rkcy_apecs_proto_enumTypes[4].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_rkcy_apecs_proto_enumTypes[4]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{4}
}

// Convenience empty message for services that return or accept no data
type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_apecs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_apecs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{0}
}

type ApecsTxn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId        string           `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`                     // uuid of txn used for tracing and reporting
	AssocTraceIds  []string         `protobuf:"bytes,2,rep,name=assoc_trace_ids,json=assocTraceIds,proto3" json:"assoc_trace_ids,omitempty"` // trace_id's of associated transaction
	ResponseTarget *TopicTarget     `protobuf:"bytes,3,opt,name=response_target,json=responseTarget,proto3" json:"response_target,omitempty"`
	CurrentStepIdx int32            `protobuf:"varint,4,opt,name=current_step_idx,json=currentStepIdx,proto3" json:"current_step_idx,omitempty"`
	Direction      Direction        `protobuf:"varint,5,opt,name=direction,proto3,enum=rkcy.Direction" json:"direction,omitempty"`                  // starts in forward, can potentially go to reverse if the transaction is reversible
	UponError      UponError        `protobuf:"varint,6,opt,name=upon_error,json=uponError,proto3,enum=rkcy.UponError" json:"upon_error,omitempty"` // how to handle errors
	ForwardSteps   []*ApecsTxn_Step `protobuf:"bytes,7,rep,name=forward_steps,json=forwardSteps,proto3" json:"forward_steps,omitempty"`             // filled upon creation with forward steps
	ReverseSteps   []*ApecsTxn_Step `protobuf:"bytes,8,rep,name=reverse_steps,json=reverseSteps,proto3" json:"reverse_steps,omitempty"`             // upon an error in a "can_revert==true" transaction, this gets filled with the right rollback steps. Separatiing reverse from forward steps preserves the history for review of the nature of the failure.
}

func (x *ApecsTxn) Reset() {
	*x = ApecsTxn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_apecs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApecsTxn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApecsTxn) ProtoMessage() {}

func (x *ApecsTxn) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_apecs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApecsTxn.ProtoReflect.Descriptor instead.
func (*ApecsTxn) Descriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{1}
}

func (x *ApecsTxn) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *ApecsTxn) GetAssocTraceIds() []string {
	if x != nil {
		return x.AssocTraceIds
	}
	return nil
}

func (x *ApecsTxn) GetResponseTarget() *TopicTarget {
	if x != nil {
		return x.ResponseTarget
	}
	return nil
}

func (x *ApecsTxn) GetCurrentStepIdx() int32 {
	if x != nil {
		return x.CurrentStepIdx
	}
	return 0
}

func (x *ApecsTxn) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_FORWARD
}

func (x *ApecsTxn) GetUponError() UponError {
	if x != nil {
		return x.UponError
	}
	return UponError_REPORT
}

func (x *ApecsTxn) GetForwardSteps() []*ApecsTxn_Step {
	if x != nil {
		return x.ForwardSteps
	}
	return nil
}

func (x *ApecsTxn) GetReverseSteps() []*ApecsTxn_Step {
	if x != nil {
		return x.ReverseSteps
	}
	return nil
}

type TopicTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brokers   string `protobuf:"bytes,1,opt,name=brokers,proto3" json:"brokers,omitempty"`
	Topic     string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition int32  `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
}

func (x *TopicTarget) Reset() {
	*x = TopicTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_apecs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicTarget) ProtoMessage() {}

func (x *TopicTarget) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_apecs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicTarget.ProtoReflect.Descriptor instead.
func (*TopicTarget) Descriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{2}
}

func (x *TopicTarget) GetBrokers() string {
	if x != nil {
		return x.Brokers
	}
	return ""
}

func (x *TopicTarget) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TopicTarget) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

type LogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sev Severity `protobuf:"varint,1,opt,name=sev,proto3,enum=rkcy.Severity" json:"sev,omitempty"`
	Msg string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *LogEvent) Reset() {
	*x = LogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_apecs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEvent) ProtoMessage() {}

func (x *LogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_apecs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEvent.ProtoReflect.Descriptor instead.
func (*LogEvent) Descriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{3}
}

func (x *LogEvent) GetSev() Severity {
	if x != nil {
		return x.Sev
	}
	return Severity_DBG
}

func (x *LogEvent) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CompoundOffset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Generation int32 `protobuf:"varint,1,opt,name=generation,proto3" json:"generation,omitempty"`
	Partition  int32 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	Offset     int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *CompoundOffset) Reset() {
	*x = CompoundOffset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_apecs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundOffset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundOffset) ProtoMessage() {}

func (x *CompoundOffset) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_apecs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundOffset.ProtoReflect.Descriptor instead.
func (*CompoundOffset) Descriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{4}
}

func (x *CompoundOffset) GetGeneration() int32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *CompoundOffset) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *CompoundOffset) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringVals  map[string]string  `protobuf:"bytes,1,rep,name=string_vals,json=stringVals,proto3" json:"string_vals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BoolVals    map[string]bool    `protobuf:"bytes,2,rep,name=bool_vals,json=boolVals,proto3" json:"bool_vals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Float64Vals map[string]float64 `protobuf:"bytes,3,rep,name=float64_vals,json=float64Vals,proto3" json:"float64_vals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// key is protobuf message type
	ComplexVals map[string]*Config_Complex `protobuf:"bytes,5,rep,name=complex_vals,json=complexVals,proto3" json:"complex_vals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_apecs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_apecs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{5}
}

func (x *Config) GetStringVals() map[string]string {
	if x != nil {
		return x.StringVals
	}
	return nil
}

func (x *Config) GetBoolVals() map[string]bool {
	if x != nil {
		return x.BoolVals
	}
	return nil
}

func (x *Config) GetFloat64Vals() map[string]float64 {
	if x != nil {
		return x.Float64Vals
	}
	return nil
}

func (x *Config) GetComplexVals() map[string]*Config_Complex {
	if x != nil {
		return x.ComplexVals
	}
	return nil
}

type ApecsTxn_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	System     System                `protobuf:"varint,1,opt,name=system,proto3,enum=rkcy.System" json:"system,omitempty"`         // Whether to queue step into Process or Storage code
	Concern    string                `protobuf:"bytes,2,opt,name=concern,proto3" json:"concern,omitempty"`                         // logical persistence model that's used to partition messages
	Command    string                `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`                         // command name, this will map to a piece of code (e.g. function)
	Key        string                `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`                                 // instance key used as the partition key
	Payload    []byte                `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`                         // opaque payload for command
	CmpdOffset *CompoundOffset       `protobuf:"bytes,6,opt,name=cmpd_offset,json=cmpdOffset,proto3" json:"cmpd_offset,omitempty"` // when no nil, indicates the process topic offset associated with the step
	Result     *ApecsTxn_Step_Result `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`                           // Result returned from step handler
}

func (x *ApecsTxn_Step) Reset() {
	*x = ApecsTxn_Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_apecs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApecsTxn_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApecsTxn_Step) ProtoMessage() {}

func (x *ApecsTxn_Step) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_apecs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApecsTxn_Step.ProtoReflect.Descriptor instead.
func (*ApecsTxn_Step) Descriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ApecsTxn_Step) GetSystem() System {
	if x != nil {
		return x.System
	}
	return System_NO_SYSTEM
}

func (x *ApecsTxn_Step) GetConcern() string {
	if x != nil {
		return x.Concern
	}
	return ""
}

func (x *ApecsTxn_Step) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ApecsTxn_Step) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ApecsTxn_Step) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ApecsTxn_Step) GetCmpdOffset() *CompoundOffset {
	if x != nil {
		return x.CmpdOffset
	}
	return nil
}

func (x *ApecsTxn_Step) GetResult() *ApecsTxn_Step_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ApecsTxn_Step_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result code of step, generally one of "Code" enum below but users can define their own codes greater than RKCY_INTERNAL_MAX
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=rkcy.Code" json:"code,omitempty"`
	// actual time this command result was recorded
	ProcessedTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=processed_time,json=processedTime,proto3" json:"processed_time,omitempty"`
	// effective time, useful in some applications as it may make sense to deviate from processed_time for reporting purposes
	EffectiveTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	// general bucket for log events during a processed event
	LogEvents  []*LogEvent     `protobuf:"bytes,4,rep,name=logEvents,proto3" json:"logEvents,omitempty"`
	Key        string          `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`           // if present, this key should be used in next step
	Payload    []byte          `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`   // opaque payload returned from command, will be the input payload of next step
	Related    []byte          `protobuf:"bytes,7,opt,name=related,proto3" json:"related,omitempty"`   // opaque payload returned from command, contains related data
	Instance   []byte          `protobuf:"bytes,8,opt,name=instance,proto3" json:"instance,omitempty"` // opaque payload returned from command
	CmpdOffset *CompoundOffset `protobuf:"bytes,9,opt,name=cmpd_offset,json=cmpdOffset,proto3" json:"cmpd_offset,omitempty"`
}

func (x *ApecsTxn_Step_Result) Reset() {
	*x = ApecsTxn_Step_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_apecs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApecsTxn_Step_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApecsTxn_Step_Result) ProtoMessage() {}

func (x *ApecsTxn_Step_Result) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_apecs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApecsTxn_Step_Result.ProtoReflect.Descriptor instead.
func (*ApecsTxn_Step_Result) Descriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *ApecsTxn_Step_Result) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK
}

func (x *ApecsTxn_Step_Result) GetProcessedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedTime
	}
	return nil
}

func (x *ApecsTxn_Step_Result) GetEffectiveTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

func (x *ApecsTxn_Step_Result) GetLogEvents() []*LogEvent {
	if x != nil {
		return x.LogEvents
	}
	return nil
}

func (x *ApecsTxn_Step_Result) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ApecsTxn_Step_Result) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ApecsTxn_Step_Result) GetRelated() []byte {
	if x != nil {
		return x.Related
	}
	return nil
}

func (x *ApecsTxn_Step_Result) GetInstance() []byte {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *ApecsTxn_Step_Result) GetCmpdOffset() *CompoundOffset {
	if x != nil {
		return x.CmpdOffset
	}
	return nil
}

type Config_Complex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key is id of message
	// val is serialized protobuf
	MessageVals map[string][]byte `protobuf:"bytes,1,rep,name=message_vals,json=messageVals,proto3" json:"message_vals,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Config_Complex) Reset() {
	*x = Config_Complex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_apecs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Complex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Complex) ProtoMessage() {}

func (x *Config_Complex) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_apecs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Complex.ProtoReflect.Descriptor instead.
func (*Config_Complex) Descriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{5, 4}
}

func (x *Config_Complex) GetMessageVals() map[string][]byte {
	if x != nil {
		return x.MessageVals
	}
	return nil
}

type Config_Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to Val:
	//	*Config_Update_StringVal
	//	*Config_Update_BoolVal
	//	*Config_Update_Float64Val
	//	*Config_Update_ComplexVal
	Val isConfig_Update_Val `protobuf_oneof:"val"`
}

func (x *Config_Update) Reset() {
	*x = Config_Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_apecs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Update) ProtoMessage() {}

func (x *Config_Update) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_apecs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Update.ProtoReflect.Descriptor instead.
func (*Config_Update) Descriptor() ([]byte, []int) {
	return file_rkcy_apecs_proto_rawDescGZIP(), []int{5, 5}
}

func (x *Config_Update) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (m *Config_Update) GetVal() isConfig_Update_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *Config_Update) GetStringVal() string {
	if x, ok := x.GetVal().(*Config_Update_StringVal); ok {
		return x.StringVal
	}
	return ""
}

func (x *Config_Update) GetBoolVal() bool {
	if x, ok := x.GetVal().(*Config_Update_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

func (x *Config_Update) GetFloat64Val() float64 {
	if x, ok := x.GetVal().(*Config_Update_Float64Val); ok {
		return x.Float64Val
	}
	return 0
}

func (x *Config_Update) GetComplexVal() *Config_Complex {
	if x, ok := x.GetVal().(*Config_Update_ComplexVal); ok {
		return x.ComplexVal
	}
	return nil
}

type isConfig_Update_Val interface {
	isConfig_Update_Val()
}

type Config_Update_StringVal struct {
	StringVal string `protobuf:"bytes,2,opt,name=string_val,json=stringVal,proto3,oneof"`
}

type Config_Update_BoolVal struct {
	BoolVal bool `protobuf:"varint,3,opt,name=bool_val,json=boolVal,proto3,oneof"`
}

type Config_Update_Float64Val struct {
	Float64Val float64 `protobuf:"fixed64,4,opt,name=float64_val,json=float64Val,proto3,oneof"`
}

type Config_Update_ComplexVal struct {
	ComplexVal *Config_Complex `protobuf:"bytes,6,opt,name=complex_val,json=complexVal,proto3,oneof"`
}

func (*Config_Update_StringVal) isConfig_Update_Val() {}

func (*Config_Update_BoolVal) isConfig_Update_Val() {}

func (*Config_Update_Float64Val) isConfig_Update_Val() {}

func (*Config_Update_ComplexVal) isConfig_Update_Val() {}

var File_rkcy_apecs_proto protoreflect.FileDescriptor

var file_rkcy_apecs_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x6b, 0x63, 0x79, 0x2f, 0x61, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x72, 0x6b, 0x63, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x06, 0x0a, 0x04, 0x56, 0x6f, 0x69,
	0x64, 0x22, 0xf8, 0x07, 0x0a, 0x08, 0x41, 0x70, 0x65, 0x63, 0x73, 0x54, 0x78, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x3a, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x6b, 0x63,
	0x79, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x78, 0x12, 0x2d, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x72, 0x6b, 0x63,
	0x79, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0a, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x72, 0x6b, 0x63,
	0x79, 0x2e, 0x55, 0x70, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x09, 0x75, 0x70, 0x6f,
	0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x72, 0x6b, 0x63, 0x79, 0x2e, 0x41, 0x70, 0x65, 0x63, 0x73, 0x54, 0x78, 0x6e, 0x2e, 0x53, 0x74,
	0x65, 0x70, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x12, 0x38, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x41,
	0x70, 0x65, 0x63, 0x73, 0x54, 0x78, 0x6e, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x0c, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73, 0x1a, 0xef, 0x04, 0x0a, 0x04, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x72, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6d, 0x70,
	0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x52, 0x0a, 0x63, 0x6d, 0x70, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x41, 0x70, 0x65, 0x63, 0x73, 0x54, 0x78, 0x6e,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x1a, 0xf5, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x72, 0x6b, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x41, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e,
	0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6d, 0x70, 0x64, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6b, 0x63,
	0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x52, 0x0a, 0x63, 0x6d, 0x70, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x5b, 0x0a, 0x0b,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x08, 0x4c, 0x6f, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x73, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x03, 0x73, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x66, 0x0a, 0x0e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0xea, 0x06, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x5f,
	0x76, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x6b, 0x63,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72,
	0x6b, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x56, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x56,
	0x61, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6b, 0x63, 0x79,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x93, 0x01, 0x0a, 0x07, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x48, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72,
	0x6b, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x73,
	0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0xbb, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x12, 0x1b,
	0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x12, 0x37,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x2a, 0x25,
	0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x45,
	0x52, 0x53, 0x45, 0x10, 0x01, 0x2a, 0x31, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x02, 0x2a, 0x30, 0x0a, 0x09, 0x55, 0x70, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x56, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x41, 0x49, 0x4c, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x2a, 0x2e, 0x0a, 0x08, 0x53, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x42, 0x47, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x49, 0x4e, 0x46, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x52, 0x4e, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x52, 0x52, 0x10, 0x03, 0x2a, 0xd5, 0x01, 0x0a, 0x04, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x52,
	0x53, 0x48, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x49, 0x4c, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4b, 0x43, 0x59, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x20, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6c, 0x61, 0x63, 0x68, 0x6c, 0x61, 0x6e, 0x6f, 0x72, 0x72, 0x2f, 0x72, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x6b, 0x63, 0x79,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rkcy_apecs_proto_rawDescOnce sync.Once
	file_rkcy_apecs_proto_rawDescData = file_rkcy_apecs_proto_rawDesc
)

func file_rkcy_apecs_proto_rawDescGZIP() []byte {
	file_rkcy_apecs_proto_rawDescOnce.Do(func() {
		file_rkcy_apecs_proto_rawDescData = protoimpl.X.CompressGZIP(file_rkcy_apecs_proto_rawDescData)
	})
	return file_rkcy_apecs_proto_rawDescData
}

var file_rkcy_apecs_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_rkcy_apecs_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_rkcy_apecs_proto_goTypes = []interface{}{
	(Direction)(0),                // 0: rkcy.Direction
	(System)(0),                   // 1: rkcy.System
	(UponError)(0),                // 2: rkcy.UponError
	(Severity)(0),                 // 3: rkcy.Severity
	(Code)(0),                     // 4: rkcy.Code
	(*Void)(nil),                  // 5: rkcy.Void
	(*ApecsTxn)(nil),              // 6: rkcy.ApecsTxn
	(*TopicTarget)(nil),           // 7: rkcy.TopicTarget
	(*LogEvent)(nil),              // 8: rkcy.LogEvent
	(*CompoundOffset)(nil),        // 9: rkcy.CompoundOffset
	(*Config)(nil),                // 10: rkcy.Config
	(*ApecsTxn_Step)(nil),         // 11: rkcy.ApecsTxn.Step
	(*ApecsTxn_Step_Result)(nil),  // 12: rkcy.ApecsTxn.Step.Result
	nil,                           // 13: rkcy.Config.StringValsEntry
	nil,                           // 14: rkcy.Config.BoolValsEntry
	nil,                           // 15: rkcy.Config.Float64ValsEntry
	nil,                           // 16: rkcy.Config.ComplexValsEntry
	(*Config_Complex)(nil),        // 17: rkcy.Config.Complex
	(*Config_Update)(nil),         // 18: rkcy.Config.Update
	nil,                           // 19: rkcy.Config.Complex.MessageValsEntry
	(*timestamppb.Timestamp)(nil), // 20: google.protobuf.Timestamp
}
var file_rkcy_apecs_proto_depIdxs = []int32{
	7,  // 0: rkcy.ApecsTxn.response_target:type_name -> rkcy.TopicTarget
	0,  // 1: rkcy.ApecsTxn.direction:type_name -> rkcy.Direction
	2,  // 2: rkcy.ApecsTxn.upon_error:type_name -> rkcy.UponError
	11, // 3: rkcy.ApecsTxn.forward_steps:type_name -> rkcy.ApecsTxn.Step
	11, // 4: rkcy.ApecsTxn.reverse_steps:type_name -> rkcy.ApecsTxn.Step
	3,  // 5: rkcy.LogEvent.sev:type_name -> rkcy.Severity
	13, // 6: rkcy.Config.string_vals:type_name -> rkcy.Config.StringValsEntry
	14, // 7: rkcy.Config.bool_vals:type_name -> rkcy.Config.BoolValsEntry
	15, // 8: rkcy.Config.float64_vals:type_name -> rkcy.Config.Float64ValsEntry
	16, // 9: rkcy.Config.complex_vals:type_name -> rkcy.Config.ComplexValsEntry
	1,  // 10: rkcy.ApecsTxn.Step.system:type_name -> rkcy.System
	9,  // 11: rkcy.ApecsTxn.Step.cmpd_offset:type_name -> rkcy.CompoundOffset
	12, // 12: rkcy.ApecsTxn.Step.result:type_name -> rkcy.ApecsTxn.Step.Result
	4,  // 13: rkcy.ApecsTxn.Step.Result.code:type_name -> rkcy.Code
	20, // 14: rkcy.ApecsTxn.Step.Result.processed_time:type_name -> google.protobuf.Timestamp
	20, // 15: rkcy.ApecsTxn.Step.Result.effective_time:type_name -> google.protobuf.Timestamp
	8,  // 16: rkcy.ApecsTxn.Step.Result.logEvents:type_name -> rkcy.LogEvent
	9,  // 17: rkcy.ApecsTxn.Step.Result.cmpd_offset:type_name -> rkcy.CompoundOffset
	17, // 18: rkcy.Config.ComplexValsEntry.value:type_name -> rkcy.Config.Complex
	19, // 19: rkcy.Config.Complex.message_vals:type_name -> rkcy.Config.Complex.MessageValsEntry
	17, // 20: rkcy.Config.Update.complex_val:type_name -> rkcy.Config.Complex
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_rkcy_apecs_proto_init() }
func file_rkcy_apecs_proto_init() {
	if File_rkcy_apecs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rkcy_apecs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_apecs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApecsTxn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_apecs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_apecs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_apecs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundOffset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_apecs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_apecs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApecsTxn_Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_apecs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApecsTxn_Step_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_apecs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Complex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_apecs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rkcy_apecs_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Config_Update_StringVal)(nil),
		(*Config_Update_BoolVal)(nil),
		(*Config_Update_Float64Val)(nil),
		(*Config_Update_ComplexVal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rkcy_apecs_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rkcy_apecs_proto_goTypes,
		DependencyIndexes: file_rkcy_apecs_proto_depIdxs,
		EnumInfos:         file_rkcy_apecs_proto_enumTypes,
		MessageInfos:      file_rkcy_apecs_proto_msgTypes,
	}.Build()
	File_rkcy_apecs_proto = out.File
	file_rkcy_apecs_proto_rawDesc = nil
	file_rkcy_apecs_proto_goTypes = nil
	file_rkcy_apecs_proto_depIdxs = nil
}
