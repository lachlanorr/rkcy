// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package rkcy.pb;
option go_package = "github.com/lachlanorr/rkcy/pkg/rkcy/pb";

message ApecsTxn {
    string id = 1;           // uuid of txn used for tracing and reporting
    Dir direction = 2;       // starts in forward, can potentially go to reverse if the transaction is reversible
    bool can_revert = 3;     // whether or not this transaction can be rolled back.

    repeated Step forward_steps = 4;  // filled upon creation with forward steps
    repeated Step reverse_steps = 5;  // upon an error in a "can_revert==true" transaction, this gets filled with the right rollback steps. Separatiing reverse from forward steps preserves the history for review of the nature of the failure.

    enum Dir {
        FORWARD = 0;
        REVERSE = 1;
    }

    message Step {
        string concern_name = 1;        // logical persistence model that's used to partition messages
        int32 command       = 2;        // command name, this will map to a piece of code (e.g. function)
        string key          = 3;        // partition key
        bytes payload       = 4;        // opaque payload for command
        Status status       = 5;        // status of this step, all start at pending, and can transition to complete, error, and rolled back

        google.protobuf.Timestamp processed_time = 6; // actual time this command result was recorded
        google.protobuf.Timestamp effective_time = 7; // effective time, useful in some applications as it may make sense to deviate from processed_time for reporting purposes

        repeated Error errors = 8; // general bucket for error messages that will effectively be the logged errors of this step

        enum Status {
            PENDING = 0;
            COMPLETE = 1;
            REVERTED = 2;
            ERROR = 3;
        }

        message Error {
            int32 code = 1;
            string msg = 2;
        }
    }
}

message MostRecentOffsets {
    int32 generation = 1;
    int64 offset = 2;
}
