// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: apecs.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Direction int32

const (
	Direction_FORWARD Direction = 0
	Direction_REVERSE Direction = 1
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "FORWARD",
		1: "REVERSE",
	}
	Direction_value = map[string]int32{
		"FORWARD": 0,
		"REVERSE": 1,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_apecs_proto_enumTypes[0].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_apecs_proto_enumTypes[0]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_apecs_proto_rawDescGZIP(), []int{0}
}

type System int32

const (
	System_NO_SYSTEM System = 0
	System_PROCESS   System = 1
	System_STORAGE   System = 2
)

// Enum value maps for System.
var (
	System_name = map[int32]string{
		0: "NO_SYSTEM",
		1: "PROCESS",
		2: "STORAGE",
	}
	System_value = map[string]int32{
		"NO_SYSTEM": 0,
		"PROCESS":   1,
		"STORAGE":   2,
	}
)

func (x System) Enum() *System {
	p := new(System)
	*p = x
	return p
}

func (x System) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System) Descriptor() protoreflect.EnumDescriptor {
	return file_apecs_proto_enumTypes[1].Descriptor()
}

func (System) Type() protoreflect.EnumType {
	return &file_apecs_proto_enumTypes[1]
}

func (x System) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System.Descriptor instead.
func (System) EnumDescriptor() ([]byte, []int) {
	return file_apecs_proto_rawDescGZIP(), []int{1}
}

type Command int32

const (
	Command_NO_COMMAND Command = 0
	Command_CREATE     Command = 1
	Command_READ       Command = 2
	Command_UPDATE     Command = 3
	Command_DELETE     Command = 4
	Command_VALIDATE   Command = 5
	Command_REFRESH    Command = 6
	// User defined commands should be greater than RKCY_INTERNAL_MAX
	Command_RKCY_INTERNAL_MAX_COMMAND Command = 16
)

// Enum value maps for Command.
var (
	Command_name = map[int32]string{
		0:  "NO_COMMAND",
		1:  "CREATE",
		2:  "READ",
		3:  "UPDATE",
		4:  "DELETE",
		5:  "VALIDATE",
		6:  "REFRESH",
		16: "RKCY_INTERNAL_MAX_COMMAND",
	}
	Command_value = map[string]int32{
		"NO_COMMAND":                0,
		"CREATE":                    1,
		"READ":                      2,
		"UPDATE":                    3,
		"DELETE":                    4,
		"VALIDATE":                  5,
		"REFRESH":                   6,
		"RKCY_INTERNAL_MAX_COMMAND": 16,
	}
)

func (x Command) Enum() *Command {
	p := new(Command)
	*p = x
	return p
}

func (x Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Command) Descriptor() protoreflect.EnumDescriptor {
	return file_apecs_proto_enumTypes[2].Descriptor()
}

func (Command) Type() protoreflect.EnumType {
	return &file_apecs_proto_enumTypes[2]
}

func (x Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Command.Descriptor instead.
func (Command) EnumDescriptor() ([]byte, []int) {
	return file_apecs_proto_rawDescGZIP(), []int{2}
}

type Severity int32

const (
	Severity_DEBUG Severity = 0
	Severity_INFO  Severity = 1
	Severity_WARN  Severity = 2
	Severity_ERROR Severity = 3
)

// Enum value maps for Severity.
var (
	Severity_name = map[int32]string{
		0: "DEBUG",
		1: "INFO",
		2: "WARN",
		3: "ERROR",
	}
	Severity_value = map[string]int32{
		"DEBUG": 0,
		"INFO":  1,
		"WARN":  2,
		"ERROR": 3,
	}
)

func (x Severity) Enum() *Severity {
	p := new(Severity)
	*p = x
	return p
}

func (x Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_apecs_proto_enumTypes[3].Descriptor()
}

func (Severity) Type() protoreflect.EnumType {
	return &file_apecs_proto_enumTypes[3]
}

func (x Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Severity.Descriptor instead.
func (Severity) EnumDescriptor() ([]byte, []int) {
	return file_apecs_proto_rawDescGZIP(), []int{3}
}

type Code int32

const (
	Code_OK                Code = 0
	Code_INTERNAL          Code = 1
	Code_MARSHAL_FAILED    Code = 2
	Code_NOT_FOUND         Code = 3
	Code_CONNECTION        Code = 4
	Code_FAILED_CONSTRAINT Code = 5
	Code_UNKNOWN_COMMAND   Code = 6
	// User defined codes should be greater than RKCY_INTERNAL_MAX
	Code_RKCY_INTERNAL_MAX_CODE Code = 32
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0:  "OK",
		1:  "INTERNAL",
		2:  "MARSHAL_FAILED",
		3:  "NOT_FOUND",
		4:  "CONNECTION",
		5:  "FAILED_CONSTRAINT",
		6:  "UNKNOWN_COMMAND",
		32: "RKCY_INTERNAL_MAX_CODE",
	}
	Code_value = map[string]int32{
		"OK":                     0,
		"INTERNAL":               1,
		"MARSHAL_FAILED":         2,
		"NOT_FOUND":              3,
		"CONNECTION":             4,
		"FAILED_CONSTRAINT":      5,
		"UNKNOWN_COMMAND":        6,
		"RKCY_INTERNAL_MAX_CODE": 32,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_apecs_proto_enumTypes[4].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_apecs_proto_enumTypes[4]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_apecs_proto_rawDescGZIP(), []int{4}
}

type ApecsTxn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReqId          string          `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"` // uuid of txn used for tracing and reporting
	ResponseTarget *ResponseTarget `protobuf:"bytes,2,opt,name=response_target,json=responseTarget,proto3" json:"response_target,omitempty"`
	CurrentStepIdx int32           `protobuf:"varint,3,opt,name=current_step_idx,json=currentStepIdx,proto3" json:"current_step_idx,omitempty"`
	Direction      Direction       `protobuf:"varint,4,opt,name=direction,proto3,enum=rkcy.pb.Direction" json:"direction,omitempty"`   // starts in forward, can potentially go to reverse if the transaction is reversible
	CanRevert      bool            `protobuf:"varint,5,opt,name=can_revert,json=canRevert,proto3" json:"can_revert,omitempty"`         // whether or not this transaction can be rolled back.
	ForwardSteps   []*Step         `protobuf:"bytes,6,rep,name=forward_steps,json=forwardSteps,proto3" json:"forward_steps,omitempty"` // filled upon creation with forward steps
	ReverseSteps   []*Step         `protobuf:"bytes,7,rep,name=reverse_steps,json=reverseSteps,proto3" json:"reverse_steps,omitempty"` // upon an error in a "can_revert==true" transaction, this gets filled with the right rollback steps. Separatiing reverse from forward steps preserves the history for review of the nature of the failure.
}

func (x *ApecsTxn) Reset() {
	*x = ApecsTxn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apecs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApecsTxn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApecsTxn) ProtoMessage() {}

func (x *ApecsTxn) ProtoReflect() protoreflect.Message {
	mi := &file_apecs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApecsTxn.ProtoReflect.Descriptor instead.
func (*ApecsTxn) Descriptor() ([]byte, []int) {
	return file_apecs_proto_rawDescGZIP(), []int{0}
}

func (x *ApecsTxn) GetReqId() string {
	if x != nil {
		return x.ReqId
	}
	return ""
}

func (x *ApecsTxn) GetResponseTarget() *ResponseTarget {
	if x != nil {
		return x.ResponseTarget
	}
	return nil
}

func (x *ApecsTxn) GetCurrentStepIdx() int32 {
	if x != nil {
		return x.CurrentStepIdx
	}
	return 0
}

func (x *ApecsTxn) GetDirection() Direction {
	if x != nil {
		return x.Direction
	}
	return Direction_FORWARD
}

func (x *ApecsTxn) GetCanRevert() bool {
	if x != nil {
		return x.CanRevert
	}
	return false
}

func (x *ApecsTxn) GetForwardSteps() []*Step {
	if x != nil {
		return x.ForwardSteps
	}
	return nil
}

func (x *ApecsTxn) GetReverseSteps() []*Step {
	if x != nil {
		return x.ReverseSteps
	}
	return nil
}

type Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	System      System       `protobuf:"varint,1,opt,name=system,proto3,enum=rkcy.pb.System" json:"system,omitempty"`         // Whether to queue step into Process or Storage code
	ConcernName string       `protobuf:"bytes,2,opt,name=concern_name,json=concernName,proto3" json:"concern_name,omitempty"` // logical persistence model that's used to partition messages
	Command     Command      `protobuf:"varint,3,opt,name=command,proto3,enum=rkcy.pb.Command" json:"command,omitempty"`      // command name, this will map to a piece of code (e.g. function)
	Key         string       `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`                                    // instance key used as the partition key
	Payload     []byte       `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`                            // opaque payload for command
	Offset      *Offset      `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`                              // when no nil, indicates the process topic offset associated with the step
	Result      *Step_Result `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`                              // Result returned from step handler
}

func (x *Step) Reset() {
	*x = Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apecs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_apecs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_apecs_proto_rawDescGZIP(), []int{1}
}

func (x *Step) GetSystem() System {
	if x != nil {
		return x.System
	}
	return System_NO_SYSTEM
}

func (x *Step) GetConcernName() string {
	if x != nil {
		return x.ConcernName
	}
	return ""
}

func (x *Step) GetCommand() Command {
	if x != nil {
		return x.Command
	}
	return Command_NO_COMMAND
}

func (x *Step) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Step) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Step) GetOffset() *Offset {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *Step) GetResult() *Step_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type ResponseTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BootstrapServers string `protobuf:"bytes,1,opt,name=bootstrap_servers,json=bootstrapServers,proto3" json:"bootstrap_servers,omitempty"`
	TopicName        string `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	Partition        int32  `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
}

func (x *ResponseTarget) Reset() {
	*x = ResponseTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apecs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTarget) ProtoMessage() {}

func (x *ResponseTarget) ProtoReflect() protoreflect.Message {
	mi := &file_apecs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTarget.ProtoReflect.Descriptor instead.
func (*ResponseTarget) Descriptor() ([]byte, []int) {
	return file_apecs_proto_rawDescGZIP(), []int{2}
}

func (x *ResponseTarget) GetBootstrapServers() string {
	if x != nil {
		return x.BootstrapServers
	}
	return ""
}

func (x *ResponseTarget) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *ResponseTarget) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

type LogEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sev Severity `protobuf:"varint,1,opt,name=sev,proto3,enum=rkcy.pb.Severity" json:"sev,omitempty"`
	Msg string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *LogEvent) Reset() {
	*x = LogEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apecs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEvent) ProtoMessage() {}

func (x *LogEvent) ProtoReflect() protoreflect.Message {
	mi := &file_apecs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEvent.ProtoReflect.Descriptor instead.
func (*LogEvent) Descriptor() ([]byte, []int) {
	return file_apecs_proto_rawDescGZIP(), []int{3}
}

func (x *LogEvent) GetSev() Severity {
	if x != nil {
		return x.Sev
	}
	return Severity_DEBUG
}

func (x *LogEvent) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Offset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Generation int32 `protobuf:"varint,1,opt,name=generation,proto3" json:"generation,omitempty"`
	Partition  int32 `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	Offset     int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Offset) Reset() {
	*x = Offset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apecs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offset) ProtoMessage() {}

func (x *Offset) ProtoReflect() protoreflect.Message {
	mi := &file_apecs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offset.ProtoReflect.Descriptor instead.
func (*Offset) Descriptor() ([]byte, []int) {
	return file_apecs_proto_rawDescGZIP(), []int{4}
}

func (x *Offset) GetGeneration() int32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *Offset) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *Offset) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Step_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result code of step, generally one of "Code" enum below but users can define their own codes greater than RKCY_INTERNAL_MAX
	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=rkcy.pb.Code" json:"code,omitempty"`
	// actual time this command result was recorded
	ProcessedTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=processed_time,json=processedTime,proto3" json:"processed_time,omitempty"`
	// effective time, useful in some applications as it may make sense to deviate from processed_time for reporting purposes
	EffectiveTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=effective_time,json=effectiveTime,proto3" json:"effective_time,omitempty"`
	// general bucket for log events during a processed event
	LogEvents []*LogEvent `protobuf:"bytes,4,rep,name=logEvents,proto3" json:"logEvents,omitempty"`
	Payload   []byte      `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"` // opaque payload returned from command
	Offset    *Offset     `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`   // when no nil, indicates the process topic offset associated with the result
}

func (x *Step_Result) Reset() {
	*x = Step_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apecs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Step_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step_Result) ProtoMessage() {}

func (x *Step_Result) ProtoReflect() protoreflect.Message {
	mi := &file_apecs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step_Result.ProtoReflect.Descriptor instead.
func (*Step_Result) Descriptor() ([]byte, []int) {
	return file_apecs_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Step_Result) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK
}

func (x *Step_Result) GetProcessedTime() *timestamp.Timestamp {
	if x != nil {
		return x.ProcessedTime
	}
	return nil
}

func (x *Step_Result) GetEffectiveTime() *timestamp.Timestamp {
	if x != nil {
		return x.EffectiveTime
	}
	return nil
}

func (x *Step_Result) GetLogEvents() []*LogEvent {
	if x != nil {
		return x.LogEvents
	}
	return nil
}

func (x *Step_Result) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Step_Result) GetOffset() *Offset {
	if x != nil {
		return x.Offset
	}
	return nil
}

var File_apecs_proto protoreflect.FileDescriptor

var file_apecs_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72,
	0x6b, 0x63, 0x79, 0x2e, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x02, 0x0a, 0x08, 0x41, 0x70, 0x65, 0x63,
	0x73, 0x54, 0x78, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x64, 0x78, 0x12, 0x30, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x72, 0x6b, 0x63,
	0x79, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e,
	0x5f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63,
	0x61, 0x6e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x0c,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x0d,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x65, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x22, 0xa9, 0x04, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x72, 0x6b, 0x63, 0x79,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x27, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x72, 0x6b, 0x63, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x1a, 0xa5, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e,
	0x72, 0x6b, 0x63, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x6b,
	0x63, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x6c, 0x6f, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x7a, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2b,
	0x0a, 0x11, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x73, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x03, 0x73, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x5e, 0x0a, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2a, 0x25, 0x0a, 0x09, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4f, 0x52, 0x57,
	0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45,
	0x10, 0x01, 0x2a, 0x31, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x10, 0x02, 0x2a, 0x81, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4b,
	0x43, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x58, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x10, 0x2a, 0x34, 0x0a, 0x08, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41,
	0x52, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a,
	0x97, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x4d, 0x41, 0x52, 0x53, 0x48, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x04, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x4b, 0x43, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4d,
	0x41, 0x58, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x20, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x61, 0x63, 0x68, 0x6c, 0x61, 0x6e, 0x6f,
	0x72, 0x72, 0x2f, 0x72, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x72, 0x6b, 0x63, 0x79, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_apecs_proto_rawDescOnce sync.Once
	file_apecs_proto_rawDescData = file_apecs_proto_rawDesc
)

func file_apecs_proto_rawDescGZIP() []byte {
	file_apecs_proto_rawDescOnce.Do(func() {
		file_apecs_proto_rawDescData = protoimpl.X.CompressGZIP(file_apecs_proto_rawDescData)
	})
	return file_apecs_proto_rawDescData
}

var file_apecs_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_apecs_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_apecs_proto_goTypes = []interface{}{
	(Direction)(0),              // 0: rkcy.pb.Direction
	(System)(0),                 // 1: rkcy.pb.System
	(Command)(0),                // 2: rkcy.pb.Command
	(Severity)(0),               // 3: rkcy.pb.Severity
	(Code)(0),                   // 4: rkcy.pb.Code
	(*ApecsTxn)(nil),            // 5: rkcy.pb.ApecsTxn
	(*Step)(nil),                // 6: rkcy.pb.Step
	(*ResponseTarget)(nil),      // 7: rkcy.pb.ResponseTarget
	(*LogEvent)(nil),            // 8: rkcy.pb.LogEvent
	(*Offset)(nil),              // 9: rkcy.pb.Offset
	(*Step_Result)(nil),         // 10: rkcy.pb.Step.Result
	(*timestamp.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_apecs_proto_depIdxs = []int32{
	7,  // 0: rkcy.pb.ApecsTxn.response_target:type_name -> rkcy.pb.ResponseTarget
	0,  // 1: rkcy.pb.ApecsTxn.direction:type_name -> rkcy.pb.Direction
	6,  // 2: rkcy.pb.ApecsTxn.forward_steps:type_name -> rkcy.pb.Step
	6,  // 3: rkcy.pb.ApecsTxn.reverse_steps:type_name -> rkcy.pb.Step
	1,  // 4: rkcy.pb.Step.system:type_name -> rkcy.pb.System
	2,  // 5: rkcy.pb.Step.command:type_name -> rkcy.pb.Command
	9,  // 6: rkcy.pb.Step.offset:type_name -> rkcy.pb.Offset
	10, // 7: rkcy.pb.Step.result:type_name -> rkcy.pb.Step.Result
	3,  // 8: rkcy.pb.LogEvent.sev:type_name -> rkcy.pb.Severity
	4,  // 9: rkcy.pb.Step.Result.code:type_name -> rkcy.pb.Code
	11, // 10: rkcy.pb.Step.Result.processed_time:type_name -> google.protobuf.Timestamp
	11, // 11: rkcy.pb.Step.Result.effective_time:type_name -> google.protobuf.Timestamp
	8,  // 12: rkcy.pb.Step.Result.logEvents:type_name -> rkcy.pb.LogEvent
	9,  // 13: rkcy.pb.Step.Result.offset:type_name -> rkcy.pb.Offset
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_apecs_proto_init() }
func file_apecs_proto_init() {
	if File_apecs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apecs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApecsTxn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apecs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apecs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apecs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apecs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apecs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Step_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apecs_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_apecs_proto_goTypes,
		DependencyIndexes: file_apecs_proto_depIdxs,
		EnumInfos:         file_apecs_proto_enumTypes,
		MessageInfos:      file_apecs_proto_msgTypes,
	}.Build()
	File_apecs_proto = out.File
	file_apecs_proto_rawDesc = nil
	file_apecs_proto_goTypes = nil
	file_apecs_proto_depIdxs = nil
}
