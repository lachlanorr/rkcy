// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rkcy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PortalServiceClient is the client API for PortalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortalServiceClient interface {
	Platform(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Platform, error)
	ConfigRead(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ConfigReadResponse, error)
	ConfigUpdate(ctx context.Context, in *ConfigUpdateRequest, opts ...grpc.CallOption) (*Void, error)
	ConfigUpdateComplex(ctx context.Context, in *ConfigUpdateComplexRequest, opts ...grpc.CallOption) (*Void, error)
	Producers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*TrackedProducers, error)
	DecodeInstance(ctx context.Context, in *DecodeInstanceArgs, opts ...grpc.CallOption) (*DecodeResponse, error)
	DecodeArgPayload(ctx context.Context, in *DecodePayloadArgs, opts ...grpc.CallOption) (*DecodeResponse, error)
	DecodeResultPayload(ctx context.Context, in *DecodePayloadArgs, opts ...grpc.CallOption) (*DecodeResponse, error)
}

type portalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortalServiceClient(cc grpc.ClientConnInterface) PortalServiceClient {
	return &portalServiceClient{cc}
}

func (c *portalServiceClient) Platform(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Platform, error) {
	out := new(Platform)
	err := c.cc.Invoke(ctx, "/rkcy.PortalService/Platform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) ConfigRead(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ConfigReadResponse, error) {
	out := new(ConfigReadResponse)
	err := c.cc.Invoke(ctx, "/rkcy.PortalService/ConfigRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) ConfigUpdate(ctx context.Context, in *ConfigUpdateRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rkcy.PortalService/ConfigUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) ConfigUpdateComplex(ctx context.Context, in *ConfigUpdateComplexRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/rkcy.PortalService/ConfigUpdateComplex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) Producers(ctx context.Context, in *Void, opts ...grpc.CallOption) (*TrackedProducers, error) {
	out := new(TrackedProducers)
	err := c.cc.Invoke(ctx, "/rkcy.PortalService/Producers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) DecodeInstance(ctx context.Context, in *DecodeInstanceArgs, opts ...grpc.CallOption) (*DecodeResponse, error) {
	out := new(DecodeResponse)
	err := c.cc.Invoke(ctx, "/rkcy.PortalService/DecodeInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) DecodeArgPayload(ctx context.Context, in *DecodePayloadArgs, opts ...grpc.CallOption) (*DecodeResponse, error) {
	out := new(DecodeResponse)
	err := c.cc.Invoke(ctx, "/rkcy.PortalService/DecodeArgPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) DecodeResultPayload(ctx context.Context, in *DecodePayloadArgs, opts ...grpc.CallOption) (*DecodeResponse, error) {
	out := new(DecodeResponse)
	err := c.cc.Invoke(ctx, "/rkcy.PortalService/DecodeResultPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortalServiceServer is the server API for PortalService service.
// All implementations must embed UnimplementedPortalServiceServer
// for forward compatibility
type PortalServiceServer interface {
	Platform(context.Context, *Void) (*Platform, error)
	ConfigRead(context.Context, *Void) (*ConfigReadResponse, error)
	ConfigUpdate(context.Context, *ConfigUpdateRequest) (*Void, error)
	ConfigUpdateComplex(context.Context, *ConfigUpdateComplexRequest) (*Void, error)
	Producers(context.Context, *Void) (*TrackedProducers, error)
	DecodeInstance(context.Context, *DecodeInstanceArgs) (*DecodeResponse, error)
	DecodeArgPayload(context.Context, *DecodePayloadArgs) (*DecodeResponse, error)
	DecodeResultPayload(context.Context, *DecodePayloadArgs) (*DecodeResponse, error)
	mustEmbedUnimplementedPortalServiceServer()
}

// UnimplementedPortalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortalServiceServer struct {
}

func (UnimplementedPortalServiceServer) Platform(context.Context, *Void) (*Platform, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Platform not implemented")
}
func (UnimplementedPortalServiceServer) ConfigRead(context.Context, *Void) (*ConfigReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigRead not implemented")
}
func (UnimplementedPortalServiceServer) ConfigUpdate(context.Context, *ConfigUpdateRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdate not implemented")
}
func (UnimplementedPortalServiceServer) ConfigUpdateComplex(context.Context, *ConfigUpdateComplexRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateComplex not implemented")
}
func (UnimplementedPortalServiceServer) Producers(context.Context, *Void) (*TrackedProducers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Producers not implemented")
}
func (UnimplementedPortalServiceServer) DecodeInstance(context.Context, *DecodeInstanceArgs) (*DecodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeInstance not implemented")
}
func (UnimplementedPortalServiceServer) DecodeArgPayload(context.Context, *DecodePayloadArgs) (*DecodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeArgPayload not implemented")
}
func (UnimplementedPortalServiceServer) DecodeResultPayload(context.Context, *DecodePayloadArgs) (*DecodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeResultPayload not implemented")
}
func (UnimplementedPortalServiceServer) mustEmbedUnimplementedPortalServiceServer() {}

// UnsafePortalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortalServiceServer will
// result in compilation errors.
type UnsafePortalServiceServer interface {
	mustEmbedUnimplementedPortalServiceServer()
}

func RegisterPortalServiceServer(s grpc.ServiceRegistrar, srv PortalServiceServer) {
	s.RegisterService(&_PortalService_serviceDesc, srv)
}

func _PortalService_Platform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).Platform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rkcy.PortalService/Platform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).Platform(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_ConfigRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).ConfigRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rkcy.PortalService/ConfigRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).ConfigRead(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_ConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).ConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rkcy.PortalService/ConfigUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).ConfigUpdate(ctx, req.(*ConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_ConfigUpdateComplex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigUpdateComplexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).ConfigUpdateComplex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rkcy.PortalService/ConfigUpdateComplex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).ConfigUpdateComplex(ctx, req.(*ConfigUpdateComplexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_Producers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).Producers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rkcy.PortalService/Producers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).Producers(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_DecodeInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeInstanceArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).DecodeInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rkcy.PortalService/DecodeInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).DecodeInstance(ctx, req.(*DecodeInstanceArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_DecodeArgPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodePayloadArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).DecodeArgPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rkcy.PortalService/DecodeArgPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).DecodeArgPayload(ctx, req.(*DecodePayloadArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_DecodeResultPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodePayloadArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).DecodeResultPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rkcy.PortalService/DecodeResultPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).DecodeResultPayload(ctx, req.(*DecodePayloadArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _PortalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rkcy.PortalService",
	HandlerType: (*PortalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Platform",
			Handler:    _PortalService_Platform_Handler,
		},
		{
			MethodName: "ConfigRead",
			Handler:    _PortalService_ConfigRead_Handler,
		},
		{
			MethodName: "ConfigUpdate",
			Handler:    _PortalService_ConfigUpdate_Handler,
		},
		{
			MethodName: "ConfigUpdateComplex",
			Handler:    _PortalService_ConfigUpdateComplex_Handler,
		},
		{
			MethodName: "Producers",
			Handler:    _PortalService_Producers_Handler,
		},
		{
			MethodName: "DecodeInstance",
			Handler:    _PortalService_DecodeInstance_Handler,
		},
		{
			MethodName: "DecodeArgPayload",
			Handler:    _PortalService_DecodeArgPayload_Handler,
		},
		{
			MethodName: "DecodeResultPayload",
			Handler:    _PortalService_DecodeResultPayload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rkcy/portal.proto",
}
