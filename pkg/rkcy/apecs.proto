// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

syntax = "proto3";

import "google/protobuf/timestamp.proto";

package rkcy;
option go_package = "github.com/lachlanorr/rocketcycle/pkg/rkcy";

message ApecsTxn {
    string req_id = 1;       // uuid of txn used for tracing and reporting
    string assoc_req_id = 2; // req_id of associated transaction

    ResponseTarget response_target = 3;

    int32 current_step_idx = 4;
    Direction direction = 5; // starts in forward, can potentially go to reverse if the transaction is reversible
    bool can_revert = 6;     // whether or not this transaction can be rolled back.

    repeated Step forward_steps = 7;  // filled upon creation with forward steps
    repeated Step reverse_steps = 8;  // upon an error in a "can_revert==true" transaction, this gets filled with the right rollback steps. Separatiing reverse from forward steps preserves the history for review of the nature of the failure.

    message Step {
        System system       = 1; // Whether to queue step into Process or Storage code
        string concern_name = 2; // logical persistence model that's used to partition messages
        Command command     = 3; // command name, this will map to a piece of code (e.g. function)
        string key          = 4; // instance key used as the partition key
        bytes payload       = 5; // opaque payload for command
        Offset offset       = 6; // when no nil, indicates the process topic offset associated with the step

        Result result       = 7; // Result returned from step handler

        message Result {
            // Result code of step, generally one of "Code" enum below but users can define their own codes greater than RKCY_INTERNAL_MAX
            Code code = 1;

            // actual time this command result was recorded
            google.protobuf.Timestamp processed_time = 2;

            // effective time, useful in some applications as it may make sense to deviate from processed_time for reporting purposes
            google.protobuf.Timestamp effective_time = 3;

            // general bucket for log events during a processed event
            repeated LogEvent logEvents = 4;

            bytes payload = 5; // opaque payload returned from command

            bytes instance = 6; // opaque payload returned from command
        }
    }
}

enum Direction {
    FORWARD = 0;
    REVERSE = 1;
}

enum System {
    NO_SYSTEM = 0;
    PROCESS = 1;
    STORAGE = 2;
}

enum Command {
    NO_COMMAND = 0;

    CREATE = 1;
    READ   = 2;
    UPDATE = 3;
    DELETE = 4;

    VALIDATE_NEW = 6;
    VALIDATE_EXISTING = 7;
    REFRESH = 8;

    // User defined commands should be greater than RKCY_INTERNAL_MAX
    RKCY_INTERNAL_MAX_COMMAND = 16;
}

message ResponseTarget {
    string bootstrap_servers = 1;
    string topic_name = 2;
    int32 partition = 3;
}

message LogEvent {
    Severity sev = 1;
    string msg = 2;
}

enum Severity {
    DEBUG = 0;
    INFO = 1;
    WARN = 2;
    ERROR = 3;
}

enum Code {
    OK = 0;
    INTERNAL = 1;
    MARSHAL_FAILED = 2;
    NOT_FOUND = 3;
    CONNECTION = 4;
    CONSTRAINT_VIOLATION = 5;
	UNKNOWN_COMMAND = 6;
    INVALID_ARGUMENT = 7;

    // User defined codes should be greater than RKCY_INTERNAL_MAX
    RKCY_INTERNAL_MAX_CODE = 32;
}

message Offset {
    int32 generation = 1;
    int32 partition  = 2;
    int64 offset     = 3;
}
