// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: rkcy/platform.proto

package rkcy

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type implies what topics will be present
type Concern_Type int32

const (
	// Required topics:
	//     * admin - handles control messages to coordinate distributed tasks
	//     * error - errors encountered during processing written here
	//     * ... - additional concern specific topics
	Concern_GENERAL Concern_Type = 0
	// Required topics:
	//     * admin - handles control messages to coordinate distributed tasks
	//     * error - errors encountered during processing written here
	//     * ... - additional concern specific topics for stages of batch processing
	// For telemetry purposes, stage topics are assumed to be in alphabetical order.
	// Batch jobs topics aren't created by default, but on demand with the timestamp
	// included in the names.
	Concern_BATCH Concern_Type = 1
	// Required topics:
	//     * admin - handles control messages to coordinate distributed tasks
	//     * process - handles messages that affect internal state of models
	//     * error - errors encountered during processing written here
	//     * complete - completed transactions written here for post processing
	//     * storage - handles messages sent to the persistence layer
	Concern_APECS Concern_Type = 2
)

// Enum value maps for Concern_Type.
var (
	Concern_Type_name = map[int32]string{
		0: "GENERAL",
		1: "BATCH",
		2: "APECS",
	}
	Concern_Type_value = map[string]int32{
		"GENERAL": 0,
		"BATCH":   1,
		"APECS":   2,
	}
)

func (x Concern_Type) Enum() *Concern_Type {
	p := new(Concern_Type)
	*p = x
	return p
}

func (x Concern_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Concern_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_rkcy_platform_proto_enumTypes[0].Descriptor()
}

func (Concern_Type) Type() protoreflect.EnumType {
	return &file_rkcy_platform_proto_enumTypes[0]
}

func (x Concern_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Concern_Type.Descriptor instead.
func (Concern_Type) EnumDescriptor() ([]byte, []int) {
	return file_rkcy_platform_proto_rawDescGZIP(), []int{1, 0}
}

// Different types of partitioning mechanisms
type Concern_PartitionStrategy int32

const (
	// FNV-1 64 bit has followed by modulus of partition count
	Concern_FNV64_MOD Concern_PartitionStrategy = 0
)

// Enum value maps for Concern_PartitionStrategy.
var (
	Concern_PartitionStrategy_name = map[int32]string{
		0: "FNV64_MOD",
	}
	Concern_PartitionStrategy_value = map[string]int32{
		"FNV64_MOD": 0,
	}
)

func (x Concern_PartitionStrategy) Enum() *Concern_PartitionStrategy {
	p := new(Concern_PartitionStrategy)
	*p = x
	return p
}

func (x Concern_PartitionStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Concern_PartitionStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_rkcy_platform_proto_enumTypes[1].Descriptor()
}

func (Concern_PartitionStrategy) Type() protoreflect.EnumType {
	return &file_rkcy_platform_proto_enumTypes[1]
}

func (x Concern_PartitionStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Concern_PartitionStrategy.Descriptor instead.
func (Concern_PartitionStrategy) EnumDescriptor() ([]byte, []int) {
	return file_rkcy_platform_proto_rawDescGZIP(), []int{1, 1}
}

// States surrounding current vs future topics and current to future transition
type Concern_Topics_State int32

const (
	// no future topic exists, everyting using current
	Concern_Topics_CURRENT Concern_Topics_State = 0
	// future topic added to concern and gets created
	Concern_Topics_FUTURE_INIT Concern_Topics_State = 1
	// producers all pause
	Concern_Topics_PRODUCER_PAUSE Concern_Topics_State = 2
	// consumers read until end and shutdown
	Concern_Topics_CONSUMER_SHUTDOWN Concern_Topics_State = 3
	// new consumers start on future, advanced passed newest
	Concern_Topics_CONSUMER_FUTURE_START Concern_Topics_State = 4
	// producers unpause and produce to future
	Concern_Topics_PRODUCER_FUTURE_START Concern_Topics_State = 5
	// future becomes current, future is nulled, state set to CURRENT
	Concern_Topics_FUTURE_TO_CURRENT Concern_Topics_State = 6
)

// Enum value maps for Concern_Topics_State.
var (
	Concern_Topics_State_name = map[int32]string{
		0: "CURRENT",
		1: "FUTURE_INIT",
		2: "PRODUCER_PAUSE",
		3: "CONSUMER_SHUTDOWN",
		4: "CONSUMER_FUTURE_START",
		5: "PRODUCER_FUTURE_START",
		6: "FUTURE_TO_CURRENT",
	}
	Concern_Topics_State_value = map[string]int32{
		"CURRENT":               0,
		"FUTURE_INIT":           1,
		"PRODUCER_PAUSE":        2,
		"CONSUMER_SHUTDOWN":     3,
		"CONSUMER_FUTURE_START": 4,
		"PRODUCER_FUTURE_START": 5,
		"FUTURE_TO_CURRENT":     6,
	}
)

func (x Concern_Topics_State) Enum() *Concern_Topics_State {
	p := new(Concern_Topics_State)
	*p = x
	return p
}

func (x Concern_Topics_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Concern_Topics_State) Descriptor() protoreflect.EnumDescriptor {
	return file_rkcy_platform_proto_enumTypes[2].Descriptor()
}

func (Concern_Topics_State) Type() protoreflect.EnumType {
	return &file_rkcy_platform_proto_enumTypes[2]
}

func (x Concern_Topics_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Concern_Topics_State.Descriptor instead.
func (Concern_Topics_State) EnumDescriptor() ([]byte, []int) {
	return file_rkcy_platform_proto_rawDescGZIP(), []int{1, 0, 0}
}

type PlatformDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Environment    string                 `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	Concerns       []*Concern             `protobuf:"bytes,3,rep,name=concerns,proto3" json:"concerns,omitempty"`
	Clusters       []*Cluster             `protobuf:"bytes,4,rep,name=clusters,proto3" json:"clusters,omitempty"`
	StorageTargets []*StorageTarget       `protobuf:"bytes,5,rep,name=storage_targets,json=storageTargets,proto3" json:"storage_targets,omitempty"`
	UpdateTime     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *PlatformDef) Reset() {
	*x = PlatformDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_platform_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformDef) ProtoMessage() {}

func (x *PlatformDef) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_platform_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformDef.ProtoReflect.Descriptor instead.
func (*PlatformDef) Descriptor() ([]byte, []int) {
	return file_rkcy_platform_proto_rawDescGZIP(), []int{0}
}

func (x *PlatformDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlatformDef) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *PlatformDef) GetConcerns() []*Concern {
	if x != nil {
		return x.Concerns
	}
	return nil
}

func (x *PlatformDef) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *PlatformDef) GetStorageTargets() []*StorageTarget {
	if x != nil {
		return x.StorageTargets
	}
	return nil
}

func (x *PlatformDef) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type Concern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     Concern_Type      `protobuf:"varint,1,opt,name=type,proto3,enum=rkcy.Concern_Type" json:"type,omitempty"`
	Name     string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LogLevel Severity          `protobuf:"varint,3,opt,name=log_level,json=logLevel,proto3,enum=rkcy.Severity" json:"log_level,omitempty"`
	Topics   []*Concern_Topics `protobuf:"bytes,4,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (x *Concern) Reset() {
	*x = Concern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_platform_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Concern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Concern) ProtoMessage() {}

func (x *Concern) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_platform_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Concern.ProtoReflect.Descriptor instead.
func (*Concern) Descriptor() ([]byte, []int) {
	return file_rkcy_platform_proto_rawDescGZIP(), []int{1}
}

func (x *Concern) GetType() Concern_Type {
	if x != nil {
		return x.Type
	}
	return Concern_GENERAL
}

func (x *Concern) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Concern) GetLogLevel() Severity {
	if x != nil {
		return x.LogLevel
	}
	return Severity_DBG
}

func (x *Concern) GetTopics() []*Concern_Topics {
	if x != nil {
		return x.Topics
	}
	return nil
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique name of cluster
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// kafka brokers for the cluster
	Brokers string `protobuf:"bytes,2,opt,name=brokers,proto3" json:"brokers,omitempty"`
	// brokers used for admin topics, only one cluster can have this set
	IsAdmin bool `protobuf:"varint,3,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_platform_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_platform_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_rkcy_platform_proto_rawDescGZIP(), []int{2}
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetBrokers() string {
	if x != nil {
		return x.Brokers
	}
	return ""
}

func (x *Cluster) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

type StorageTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type      string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	IsPrimary bool              `protobuf:"varint,3,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	Config    map[string]string `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StorageTarget) Reset() {
	*x = StorageTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_platform_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageTarget) ProtoMessage() {}

func (x *StorageTarget) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_platform_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageTarget.ProtoReflect.Descriptor instead.
func (*StorageTarget) Descriptor() ([]byte, []int) {
	return file_rkcy_platform_proto_rawDescGZIP(), []int{3}
}

func (x *StorageTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StorageTarget) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StorageTarget) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *StorageTarget) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type Program struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Args   []string          `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Abbrev string            `protobuf:"bytes,3,opt,name=abbrev,proto3" json:"abbrev,omitempty"`
	Tags   map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Program) Reset() {
	*x = Program{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_platform_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Program) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Program) ProtoMessage() {}

func (x *Program) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_platform_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Program.ProtoReflect.Descriptor instead.
func (*Program) Descriptor() ([]byte, []int) {
	return file_rkcy_platform_proto_rawDescGZIP(), []int{4}
}

func (x *Program) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Program) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Program) GetAbbrev() string {
	if x != nil {
		return x.Abbrev
	}
	return ""
}

func (x *Program) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Concern_Topics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base name, it will get decorated with additional dot notated pieces
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// current vs future transition state
	State Concern_Topics_State `protobuf:"varint,2,opt,name=state,proto3,enum=rkcy.Concern_Topics_State" json:"state,omitempty"`
	// current physical topic
	Current *Concern_Topic `protobuf:"bytes,3,opt,name=current,proto3" json:"current,omitempty"`
	// topic we're in the process of migrating to, will be
	// null unless an active migration is taking place
	Future           *Concern_Topic `protobuf:"bytes,4,opt,name=future,proto3" json:"future,omitempty"`
	ConsumerPrograms []*Program     `protobuf:"bytes,5,rep,name=consumer_programs,json=consumerPrograms,proto3" json:"consumer_programs,omitempty"`
}

func (x *Concern_Topics) Reset() {
	*x = Concern_Topics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_platform_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Concern_Topics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Concern_Topics) ProtoMessage() {}

func (x *Concern_Topics) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_platform_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Concern_Topics.ProtoReflect.Descriptor instead.
func (*Concern_Topics) Descriptor() ([]byte, []int) {
	return file_rkcy_platform_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Concern_Topics) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Concern_Topics) GetState() Concern_Topics_State {
	if x != nil {
		return x.State
	}
	return Concern_Topics_CURRENT
}

func (x *Concern_Topics) GetCurrent() *Concern_Topic {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *Concern_Topics) GetFuture() *Concern_Topic {
	if x != nil {
		return x.Future
	}
	return nil
}

func (x *Concern_Topics) GetConsumerPrograms() []*Program {
	if x != nil {
		return x.ConsumerPrograms
	}
	return nil
}

type Concern_Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// incrementing generation id, +1 every time we migrate a logical topic
	Generation int32 `protobuf:"varint,1,opt,name=generation,proto3" json:"generation,omitempty"`
	// kafka cluster topic exists within
	Cluster        string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	PartitionCount int32  `protobuf:"varint,3,opt,name=partition_count,json=partitionCount,proto3" json:"partition_count,omitempty"`
	// How to determine which partiton messages are produced to
	PartitionStrat Concern_PartitionStrategy `protobuf:"varint,4,opt,name=partition_strat,json=partitionStrat,proto3,enum=rkcy.Concern_PartitionStrategy" json:"partition_strat,omitempty"`
}

func (x *Concern_Topic) Reset() {
	*x = Concern_Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rkcy_platform_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Concern_Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Concern_Topic) ProtoMessage() {}

func (x *Concern_Topic) ProtoReflect() protoreflect.Message {
	mi := &file_rkcy_platform_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Concern_Topic.ProtoReflect.Descriptor instead.
func (*Concern_Topic) Descriptor() ([]byte, []int) {
	return file_rkcy_platform_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Concern_Topic) GetGeneration() int32 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *Concern_Topic) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *Concern_Topic) GetPartitionCount() int32 {
	if x != nil {
		return x.PartitionCount
	}
	return 0
}

func (x *Concern_Topic) GetPartitionStrat() Concern_PartitionStrategy {
	if x != nil {
		return x.PartitionStrat
	}
	return Concern_FNV64_MOD
}

var File_rkcy_platform_proto protoreflect.FileDescriptor

var file_rkcy_platform_proto_rawDesc = []byte{
	0x0a, 0x13, 0x72, 0x6b, 0x63, 0x79, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72, 0x6b, 0x63, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x72, 0x6b,
	0x63, 0x79, 0x2f, 0x61, 0x70, 0x65, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94,
	0x02, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x66, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x72, 0x6e, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x73, 0x12,
	0x29, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xaf, 0x06, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x72,
	0x6e, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x6b, 0x63,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x1a, 0x86, 0x03, 0x0a, 0x06, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x72, 0x6e, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6b, 0x63,
	0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x06, 0x66,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52,
	0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0x9d, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x55, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52,
	0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x5f, 0x46, 0x55, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x55,
	0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10,
	0x06, 0x1a, 0xb4, 0x01, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48,
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x72, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x22, 0x29, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x50, 0x45, 0x43,
	0x53, 0x10, 0x02, 0x22, 0x22, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4e, 0x56, 0x36,
	0x34, 0x5f, 0x4d, 0x4f, 0x44, 0x10, 0x00, 0x22, 0x52, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x0d,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x62,
	0x62, 0x72, 0x65, 0x76, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x6b, 0x63, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x61, 0x63, 0x68, 0x6c, 0x61, 0x6e,
	0x6f, 0x72, 0x72, 0x2f, 0x72, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x72, 0x6b, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rkcy_platform_proto_rawDescOnce sync.Once
	file_rkcy_platform_proto_rawDescData = file_rkcy_platform_proto_rawDesc
)

func file_rkcy_platform_proto_rawDescGZIP() []byte {
	file_rkcy_platform_proto_rawDescOnce.Do(func() {
		file_rkcy_platform_proto_rawDescData = protoimpl.X.CompressGZIP(file_rkcy_platform_proto_rawDescData)
	})
	return file_rkcy_platform_proto_rawDescData
}

var file_rkcy_platform_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_rkcy_platform_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_rkcy_platform_proto_goTypes = []interface{}{
	(Concern_Type)(0),              // 0: rkcy.Concern.Type
	(Concern_PartitionStrategy)(0), // 1: rkcy.Concern.PartitionStrategy
	(Concern_Topics_State)(0),      // 2: rkcy.Concern.Topics.State
	(*PlatformDef)(nil),            // 3: rkcy.PlatformDef
	(*Concern)(nil),                // 4: rkcy.Concern
	(*Cluster)(nil),                // 5: rkcy.Cluster
	(*StorageTarget)(nil),          // 6: rkcy.StorageTarget
	(*Program)(nil),                // 7: rkcy.Program
	(*Concern_Topics)(nil),         // 8: rkcy.Concern.Topics
	(*Concern_Topic)(nil),          // 9: rkcy.Concern.Topic
	nil,                            // 10: rkcy.StorageTarget.ConfigEntry
	nil,                            // 11: rkcy.Program.TagsEntry
	(*timestamppb.Timestamp)(nil),  // 12: google.protobuf.Timestamp
	(Severity)(0),                  // 13: rkcy.Severity
}
var file_rkcy_platform_proto_depIdxs = []int32{
	4,  // 0: rkcy.PlatformDef.concerns:type_name -> rkcy.Concern
	5,  // 1: rkcy.PlatformDef.clusters:type_name -> rkcy.Cluster
	6,  // 2: rkcy.PlatformDef.storage_targets:type_name -> rkcy.StorageTarget
	12, // 3: rkcy.PlatformDef.update_time:type_name -> google.protobuf.Timestamp
	0,  // 4: rkcy.Concern.type:type_name -> rkcy.Concern.Type
	13, // 5: rkcy.Concern.log_level:type_name -> rkcy.Severity
	8,  // 6: rkcy.Concern.topics:type_name -> rkcy.Concern.Topics
	10, // 7: rkcy.StorageTarget.config:type_name -> rkcy.StorageTarget.ConfigEntry
	11, // 8: rkcy.Program.tags:type_name -> rkcy.Program.TagsEntry
	2,  // 9: rkcy.Concern.Topics.state:type_name -> rkcy.Concern.Topics.State
	9,  // 10: rkcy.Concern.Topics.current:type_name -> rkcy.Concern.Topic
	9,  // 11: rkcy.Concern.Topics.future:type_name -> rkcy.Concern.Topic
	7,  // 12: rkcy.Concern.Topics.consumer_programs:type_name -> rkcy.Program
	1,  // 13: rkcy.Concern.Topic.partition_strat:type_name -> rkcy.Concern.PartitionStrategy
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_rkcy_platform_proto_init() }
func file_rkcy_platform_proto_init() {
	if File_rkcy_platform_proto != nil {
		return
	}
	file_rkcy_apecs_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_rkcy_platform_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_platform_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Concern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_platform_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_platform_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorageTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_platform_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Program); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_platform_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Concern_Topics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rkcy_platform_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Concern_Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rkcy_platform_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rkcy_platform_proto_goTypes,
		DependencyIndexes: file_rkcy_platform_proto_depIdxs,
		EnumInfos:         file_rkcy_platform_proto_enumTypes,
		MessageInfos:      file_rkcy_platform_proto_msgTypes,
	}.Build()
	File_rkcy_platform_proto = out.File
	file_rkcy_platform_proto_rawDesc = nil
	file_rkcy_platform_proto_goTypes = nil
	file_rkcy_platform_proto_depIdxs = nil
}
